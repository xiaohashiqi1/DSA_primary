package HashTable;

import java.util.Scanner;

public class HashTableDemo {
    public static void main(String[] args) {
        HashTab hashTab = new HashTab(7);
        String key = "";
        Scanner scanner = new Scanner(System.in);
        while (true) {
            System.out.println("add");
            System.out.println("list");
            System.out.println("exit");
            System.out.println("find");
            System.out.println("update");
            System.out.println("delete");
            key = scanner.next();
            switch (key) {
                case "add":
                    System.out.println("请输入id");
                    int id = scanner.nextInt();
                    System.out.println("请输入姓名");
                    String name = scanner.next();
                    Emp emp = new Emp(id, name);
                    hashTab.add(emp);
                    break;
                case "list":
                    hashTab.list();
                    break;
                case "find":
                    System.out.println("请输入需要查询的id");
                    id = scanner.nextInt();
                    hashTab.findEmpById(id);
                    break;
                case "update":
                    System.out.println("请输入需要更新的id");
                    id = scanner.nextInt();
                    System.out.println("请输入需要更新的name");
                    name = scanner.next();
                    hashTab.update(id, name);
                    break;
                case "delete":
                    System.out.println("请输入需要删除的id");
                    id = scanner.nextInt();
                    hashTab.delete(id);
                    break;
                case "exit":
                    scanner.close();
                    System.exit(0);
                default:
                    break;
            }
        }
    }
}

class HashTab {
    private EmpLinkedList[] empLinkedListsArray;
    private int size;

    public HashTab(int size) {
        this.size = size;
        empLinkedListsArray = new EmpLinkedList[size];
        for (int i = 0; i < size; i++) {
            empLinkedListsArray[i] = new EmpLinkedList();
        }
    }

    public void add(Emp emp) {
        int empLinkedListsNO = hashFun(emp.id);
        empLinkedListsArray[empLinkedListsNO].add(emp);
    }

    public int hashFun(int id) {
        return id % size;
    }

    public void findEmpById(int id) {
        int empLinkedListsNO = hashFun(id);
        Emp emp = empLinkedListsArray[empLinkedListsNO].findEmpById(id);
        if (emp == null) {
            System.out.println("在哈希表中没有找到");
            return;
        } else {
            System.out.printf("在第%d条找到雇员id=%d\n", empLinkedListsNO, id);
        }
    }

    public void update(int id, String name) {
        int empLinkedListsNO = hashFun(id);
        Emp emp = empLinkedListsArray[empLinkedListsNO].findEmpById(id);
        if (emp == null) {
            System.out.println("在哈希表中没有找到");
            return;
        } else {
            empLinkedListsArray[empLinkedListsNO].update(id, name);
        }
    }

    public void delete(int id) {
        int empLinkedListsNO = hashFun(id);
        Emp emp = empLinkedListsArray[empLinkedListsNO].findEmpById(id);
        if (emp == null) {
            System.out.println("在哈希表中没有找到");
            return;
        } else {
            empLinkedListsArray[empLinkedListsNO].delete(id);
            System.out.printf("id为%d的数据已删除", id);
        }
    }

    public void list() {
        for (int i = 0; i < size; i++) {
            empLinkedListsArray[i].list(i);
        }
    }
}

class Emp {
    public int id;
    public String name;
    public Emp next;

    public Emp(int id, String name) {
        this.id = id;
        this.name = name;
    }

    @Override
    public String toString() {
        return "[" + "这个雇员的id为" + this.id + "姓名叫" + this.name + "]";
    }
}

class EmpLinkedList {
    private Emp head;

    public void add(Emp emp) {
        if (head == null) {
            head = emp;
            return;
        }
        Emp curemp = head;
        while (true) {
            if (curemp.next == null) {
                break;
            }
            curemp = curemp.next;
        }
        curemp.next = emp;
    }

    public void list(int no) {
        Emp curemp = head;
        if (head == null) {
            System.out.println("第" + no + "条链表为空");
            return;
        }
        System.out.print("第" + no + "条链表信息为");

        while (true) {
            System.out.print(curemp.toString());
            if (curemp.next == null) {
                break;
            }
            curemp = curemp.next;
        }
        System.out.println();
    }

    //根据id找雇员
    public Emp findEmpById(int id) {
        if (head == null) {
            System.out.println("链表为空");
            return null;
        }
        Emp curemp = head;
        while (true) {
            if (curemp.id == id) {
                break;
            }
            if (curemp.next == null) {
                curemp = null;
                break;
            }
            curemp = curemp.next;
        }
        return curemp;
    }

    public void delete(int id) {
        if (head == null) {
            System.out.println("链表为空，无法删除");
        }
        Emp curemp = head;
        while (true) {
            if (curemp.next == null) {
                break;
            }
            if (curemp.next.id == id) {
                break;
            }
            curemp = curemp.next;
        }
        if ((curemp != null) && (curemp.next == null)) {
            head = null;
        } else if (curemp == null) {
            System.out.println("没有找到数据");
        } else {
            curemp.next = curemp.next.next;
        }
    }

    public void update(int id, String name) {
        if (head == null) {
            System.out.println("链表为空");
        }
        Emp curemp = head;
        while (true) {
            if (curemp.next == null) {
                break;
            }
            if (curemp.id == id) {
                break;
            }
            curemp = curemp.next;
        }
        if (curemp == null) {
            System.out.printf("没有找到id为%d的数据", id);
        } else {
            System.out.printf("id为%d的数据修改完成", id);
            curemp.name = name;
        }
        System.out.println();
    }
}

